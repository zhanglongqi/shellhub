name: QA

on:
  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

jobs:

  validate:
    name: validate

    strategy:
      fail-fast: false
      matrix:
        project: [ api,  agent,  pkg,  ssh, ui ]

    runs-on: ubuntu-latest

    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - uses: dorny/paths-filter@v2.2.0
      id: filter
      with:
        # inline YAML or path to separate file (e.g.: .github/filters.yaml)
        filters: |
          ui:
            - 'ui/**'
          go:
            - 'api/**'
            - 'agent/**'
            - 'pkg/**'
            - 'ssh/**'

    - name: Set up Go 1.x [Go]
      if: matrix.project != 'ui' && steps.filter.outputs.go == 'true'
      uses: actions/setup-go@v2
      with:
        go-version: 1.14
      id: go

    - name: Cache Go files [Go]
      uses: actions/cache@v1
      if: matrix.project != 'ui' && steps.filter.outputs.go == 'true'
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Get Go dependencies [Go]
      if: matrix.project != 'ui'
      working-directory: ${{ matrix.project }}
      run: go mod download

    - name: Run Revive Action [Go]
      if: matrix.project != 'ui' && steps.filter.outputs.go == 'true'
      run: |
        go get -u github.com/mgechev/revive
        revive -config .revive.toml --formatter stylish ./${{ matrix.project }}/...

    - name: Unit test [Go]
      if: matrix.project != 'ui' && steps.filter.outputs.go == 'true'
      working-directory: ${{ matrix.project }}
      run: go test -v ./...

    - name: Go build [Go]
      if: matrix.project != 'ui' && steps.filter.outputs.go == 'true'
      working-directory: ${{ matrix.project }}
      run: go build -v ./...

    - name: Go build (with docker tag) [Go]
      if: matrix.project == 'agent' && steps.filter.outputs.go == 'true'
      working-directory: ${{ matrix.project }}
      run: go build -tags docker -v ./...

    - name: Set up Node.JS 12.16 [UI]
      if: matrix.project == 'ui' && steps.filter.outputs.ui == 'true'
      uses: actions/setup-node@v1
      with:
          node-version: "12.16"

    - name: Cache node modules [UI]
      if: matrix.project == 'ui' && steps.filter.outputs.ui == 'true'
      uses: actions/cache@v1
      with:
        path: ui/node_modules
        key: ${{ runner.OS }}-ui-${{ hashFiles('**/package-lock.json') }}

    - name: Install Node Dependencies [UI]
      if: matrix.project == 'ui' && steps.filter.outputs.ui == 'true'
      working-directory: ${{ matrix.project }}
      run: npm install

    - name: Unit test [UI]
      if: matrix.project == 'ui' && steps.filter.outputs.ui == 'true'
      working-directory: ${{ matrix.project }}
      run: npm run test:unit -- -u

    - name: Save Code Linting Report JSON [UI]
      if: matrix.project == 'ui' && steps.filter.outputs.ui == 'true'
      working-directory: ${{ matrix.project }}
      run: npm run lint:no-fix
