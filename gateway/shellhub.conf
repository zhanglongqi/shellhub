server {
    listen 80{{ if bool (env.Getenv "SHELLHUB_PROXY") }} proxy_protocol{{ end }};
    {{ if bool (env.Getenv "SHELLHUB_PROXY") }}
    set_real_ip_from ::/0;
    real_ip_header proxy_protocol;
    {{ end }}
    server_name _;
    resolver 127.0.0.11;

    location / {
        add_header Cache-Control "no-cache, no-store";
        add_header Pragma "no-cache";

        proxy_pass http://ui:8080;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /api {
        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_pass http://api:8080;
    }

    {{ if bool (env.Getenv "SHELLHUB_HOSTED") -}}
    location /admin/dashboard {
        set $upstream dashboard:8080;
        add_header Cache-Control "no-cache, no-store";
        add_header Pragma "no-cache";

        proxy_pass http://$upstream;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location ~ ^/admin/?$ {
        rewrite ^/admin/?$ /admin/dashboard permanent;
    }

    location /admin {
        set $upstream admin-api:8080;
        error_page 500 =401;
        rewrite ^/admin/(.*)$ /$1 break;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    location /ssh/connection {
        auth_request /auth;
        auth_request_set $device_uid $upstream_http_x_device_uid;
        proxy_pass http://ssh:8080;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_set_header X-Device-UID $device_uid;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /ssh/revdial {
        proxy_pass http://ssh:8080;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    {{ if bool (env.Getenv "SHELLHUB_HOSTED") -}}
    location /api/firewall {
        set $upstream cloud-api:8080;
        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    location ~* /api/sessions/(.*)/close {
        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /$1 break;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_pass http://ssh:8080;
    }

    location /api/devices/auth {
        auth_request off;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_pass http://api:8080;
    }

    location /api/login {
        auth_request off;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_pass http://api:8080;
    }

    location /auth {
        internal;
        rewrite ^/(.*)$ /internal/$1 break;
        proxy_pass http://api:8080;
    }

    location /ws {
        proxy_pass http://ssh:8080;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;

        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /info {
        default_type application/json;

        content_by_lua_block {
            local host=ngx.var.http_host
            local ssh_port=os.getenv("SHELLHUB_SSH_PORT")
            local version=os.getenv("SHELLHUB_VERSION")
            local json = require('cjson')
            local data = {version=version, endpoints={api=host, ssh=host .. ":" .. ssh_port}}
            ngx.say(json.encode(data))
        }
    }

    location /install.sh {
        default_type "text/x-shellscript";

        content_by_lua_block {
            local host=ngx.var.http_host
            local scheme = ngx.var.http_x_forwarded_proto ~= '' and ngx.var.http_x_forwarded_proto or ngx.var.scheme
            local tenant_id=ngx.var.arg_tenant_id
            local keepalive_interval=ngx.var.arg_keepalive_interval
            local preferred_hostname=ngx.var.arg_preferred_hostname
            local version=os.getenv("SHELLHUB_VERSION")

            local template = require "resty.template"
            template.render("install.sh", {
	        scheme = scheme,
		host = host,
		tenant_id = tenant_id,
		keepalive_interval = keepalive_interval,
		preferred_hostname = preferred_hostname,
		version = version
	    })
        }
    }
}
